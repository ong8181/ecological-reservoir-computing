fig_ipc_scatter <- image_read("../01_ERCinsilico/FigCode/0_FigObj/linearity_nonlinearity_MUed.jpg")
# For echo state network
fig_esn_lorenz <- readRDS(sprintf("%s/Figs_ESN_LorenzPred.obj", fig_input_dir1))
fig_esn_narma <- readRDS(sprintf("%s/Figs_ESN_NARMA.obj", fig_input_dir1))
esn_narma_res <- readRDS(sprintf("%s/ESN_NARMA_results.obj", fig_input_dir1))
fig_esn_mackey <- readRDS(sprintf("%s/Figs_ESN_MackeyGlass.obj", fig_input_dir1))
fig_esn_memory <- readRDS(sprintf("%s/Figs_ESN_MemoryCapacity.obj", fig_input_dir1))
# For ecological reservoir computing
fig_erc_lorenz1 <- readRDS(sprintf("%s/Figs_ERC_LogisticEQN_LorenzPred.obj", fig_input_dir1))
fig_erc_lorenz2 <- readRDS(sprintf("%s/Figs_ERC_LogisticERC_LorenzPred.obj", fig_input_dir1))
fig_erc_lorenz3 <- readRDS(sprintf("%s/Figs_ERC_multiERC_LorenzPred.obj", fig_input_dir1))
fig_erc_narma1 <- readRDS(sprintf("%s/Figs_ERC_NARMA_singleERC.obj", fig_input_dir1))
fig_erc_narma2 <- readRDS(sprintf("%s/Figs_ERC_NARMA_multiERC.obj", fig_input_dir1))
fig_erc_narma3 <- readRDS(sprintf("%s/Figs_ERC_NARMA_multiSummary.obj", fig_input_dir1))
fig_erc_narma4 <- readRDS(sprintf("%s/Figs_ERC_NARMA_MC.obj", fig_input_dir1))
fig_erc_mackey <- readRDS(sprintf("%s/Figs_ERC_MackeyGlass.obj", fig_input_dir1))
fig_erc_memory <- readRDS(sprintf("%s/Figs_ERC_MemoryCapacity.obj", fig_input_dir1))
# Time series example
fig_ts <- readRDS(sprintf("%s/Figs_TimeSeriesExample.obj", fig_input_dir1))
# ESP of ESN and ERC
# ! these files are heavy and not included in the Github repository ! #
# Please contact ong8181@gmail.com if necessary
# Or please reproduce them executing the codes
fig_esp <- readRDS(sprintf("%s/Figs_ESP2_all.obj", fig_input_dir1))
# <----------------------------------------------------> #
#                  Save figures
# <----------------------------------------------------> #
ggsave2(sprintf("%s/Fig_AllConcept.pdf", fig_output_dir), Fig_Concept, width = 11, height = 10)
ggsave2(sprintf("%s/Fig_InSilico_NarmaMackey.pdf", fig_output_dir), Fig_NarmaMackey, width = 12, height = 10)
ggsave2(sprintf("%s/Fig_InSilico_IPC.pdf", fig_output_dir), Fig_IPC, width = 8, height = 10)
ggsave2(sprintf("%s/Fig_InSilico_Logistic.pdf", fig_output_dir), Fig_Logistic + theme(plot.margin = unit(c(0,.5,0,.5), "cm")), width = 8, height = 8)
# <----------------------------------------------------> #
#         Supplementary figures
# <----------------------------------------------------> #
# Logistic map reservoir and time series
Fig_Logistic_Lorenz1 <- plot_grid(fig_erc_lorenz1[[1]] + ggtitle(NULL) +
annotate("text", x = 0.25, y = 0.8, label = "RMSE = 0.0897"),
fig_erc_lorenz1[[2]] + ggtitle(NULL) +
annotate("text", x = 0.25, y = 0.8, label = "RMSE = 0.1235"),
ncol = 2, rel_widths = c(1,1), labels = c("c", "d"),
align = "hv")
Fig_Logistic <- plot_grid(plot_grid(fig_ts[[4]] + ylab(expression(italic(X))) + xlab("Time step"),
fig_ts[[1]] + ylab(expression(italic(X))) + xlab("Time step"),
labels = c("a", "b")),
Fig_Logistic_Lorenz1,
fig_erc_lorenz1[[3]] +
xlim(0,70) +
geom_point(size = 0.1) +
geom_line(size = 0.1) +
ggtitle(NULL) +
xlab("Time step") +
theme(legend.position = "top"),
ncol = 1, labels = c(NA, NA, "e"))
ggsave2(sprintf("%s/Fig_InSilico_Logistic.pdf", fig_output_dir), Fig_Logistic + theme(plot.margin = unit(c(0,.5,0,.5), "cm")), width = 8, height = 8)
# IPC figures
Fig_IPC1 <- ggdraw() + draw_image(fig_ipc_rank1)
Fig_IPC2 <- ggdraw() + draw_image(fig_ipc_rank2)
Fig_IPC3 <- ggdraw() + draw_image(fig_ipc_scatter)
Fig_IPC <- plot_grid(Fig_IPC1, Fig_IPC2, Fig_IPC3,
ncol = 1, labels = "auto",
rel_heights = c(1,1,2))
ggsave2(sprintf("%s/Fig_InSilico_IPC.pdf", fig_output_dir), Fig_IPC, width = 8, height = 10)
####
#### Assemble figures for ERC paper
#### SI for real-time ERC
####
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.0, 2020.4.21
library(cowplot); packageVersion("cowplot") # 1.0.0, 2021.3.30
library(ggsci); packageVersion("ggsci") # 2.9, 2021.3.30
library(magick); packageVersion("magick") # 2.6.0, 2020.3.31
library(viridis); packageVersion("viridis") # 0.5.1, 2021.3.30
options('tibble.print_max' = 20)
theme_set(theme_cowplot())
# <----------------------------------------------------> #
#            Specify input/output directory
# <----------------------------------------------------> #
# Create figure output directory
fig_output_dir <- "0_FormattedFigs"
fig_input_dir1 <- "../02_ERCrealtime/v202103_runif_all/02_MeasureMCOut"
fig_input_dir2 <- "../02_ERCrealtime/v202103_lorenz_all/02_PredictionOut"
fig_input_dir3 <- "../02_ERCrealtime/v202103_fishts_all/02_PredictionOut"
fig_input_dir4 <- "../02_ERCrealtime/v202104_growth_rate/01_LoadAllDataOut"
fig_input_dir5 <- "../02_ERCrealtime/v202104_growth_rate/02_LoadAllDataOut"
fig_input_dir7 <- "../02_ERCrealtime/v202105_fishts_all/02_PredictionOut"
dir.create(fig_output_dir)
# <----------------------------------------------------> #
#                   Load figure data
# <----------------------------------------------------> #
# Random uniform input
runif_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir1))
runif_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir1))
runif_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir1))
runif_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir1))
runif_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir1))
# Lorenz attractor
lorenz_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir2))
lorenz_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir2))
lorenz_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir2))
lorenz_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir2))
lorenz_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir2))
# Fish catch time-series
fish1_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir3))
fish1_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir3))
fish1_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir3))
fish1_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir3))
fish1_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir3))
# Fish catch time-series (Maaji)
fish2_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir7))
fish2_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir7))
fish2_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir7))
fish2_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir7))
fish2_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir7))
# Temperature- and medium-dependence of the growth rate
growth_temp <- readRDS(sprintf("%s/TempDependence.obj", fig_input_dir4))
growth_medium <- readRDS(sprintf("%s/MediumDependence.obj", fig_input_dir5))
# <----------------------------------------------------> #
#                  Format figures
# <----------------------------------------------------> #
# Temperature- and medium-dependence of the growth rate
gr_parm1 <- plot_grid(growth_temp[[2]], growth_temp[[3]], ncol = 2, align = "hv", labels = c("b", "c"))
Fig_TempEffect <- plot_grid(growth_temp[[1]], gr_parm1, ncol = 1, rel_heights = c(1,0.8), labels = c("a", NULL))
gr_parm2 <- plot_grid(growth_medium[[2]], growth_medium[[3]], ncol = 2, align = "hv", labels = c("b", "c"))
Fig_MediumEffect <- plot_grid(growth_medium[[1]], gr_parm2, ncol = 1, rel_heights = c(1,0.8), labels = c("a", NULL))
# Figure: cell count data convert
cell_figs <- readRDS("../02_ERCrealtime/v202103_runif_all/00_RunData/v20210227_runif02/03_CompileDataOut/cell_fig_data.obj")
crop_size <- "960x720+300+300"
# 1920x1440 = 3.6mm x 2.7 mm
# 960x720 = 1.8 mm x 1.35 mm
cell_image1 <- image_read("0_CellImages/Step1_2021-05-25_09-01-34_w_scale.jpg") %>% image_crop(crop_size)
cell_image2 <- image_read("0_CellImages/Step2_2021-05-25_09-01-34.jpg") %>% image_crop(crop_size)
cell_image3 <- image_read("0_CellImages/Step3_2021-05-25_09-01-34_analyzed.jpg") %>% image_crop(crop_size)
gg_cell1 <- ggdraw() + draw_image(image_resize(cell_image1, "x300"))
gg_cell2 <- ggdraw() + draw_image(image_resize(cell_image2, "x300"))
gg_cell3 <- ggdraw() + draw_image(image_resize(cell_image3, "x300"))
Fig_CellImage <- plot_grid(gg_cell1, NULL, gg_cell2, NULL, gg_cell3,
ncol = 5, rel_widths = c(1,0.1,1,0.1,1))
Fig_CellCount <- plot_grid(Fig_CellImage,
cell_figs[[3]],
cell_figs[[4]] + ylab("GAM residuals"),
cell_figs[[6]] + ylab("GAM residuals\n (/[cell density + 10])") + geom_hline(yintercept = 0, linetype = 2, color = "red3"),
ncol = 1, align = "hv", labels = c("a", "b", "c", "d"))
# Figure labels
legend_label <- c("Temperature (input)", "Temperature (medium)",
"Med. nutrient 1", "Med. nutrient 2",
"Low nutrient 1", "Low nutrient 2",
"High nutrient 1", "High nutrient 2")
# Figure: Reservoir state of Lorenz attractor
a <- 1
lorenz_state2 <- lorenz_state %>%
mutate(run2 = run2 - 1*a) %>%
mutate(run3 = run3 - 3*a) %>%
mutate(run4 = run4 - 4*a) %>%
mutate(run5 = run5 - 6*a) %>%
mutate(run6 = run6 - 7*a) %>%
mutate(temperature = temperature + 3*a) %>%
mutate(temperature_input = temperature_input + 7*a)
colnames(lorenz_state2)[2:9] <- legend_label
lorenz_state2 <- lorenz_state2 %>% pivot_longer(cols = -time_id) %>% arrange(time_id, name)
Fig_LorenzState0 <- lorenz_state2 %>%
ggplot(aes(x = time_id, y = value, color = name)) +
geom_hline(yintercept = c(0, -1, -3, -4, -6, -7)*a, linetype = 2) +
geom_line() +
theme(axis.text.y = element_blank()) +
scale_color_manual(values = c("darkred", "darkred",
"orange2", "orange2",
"darkblue", "darkblue", "red4", "red3")) +
xlab("Time step") +
NULL
# Figure: Reservoir state of empirical fish catch time series
fish1_state2 <- fish1_state %>%
mutate(run2 = run2 - 1*a) %>%
mutate(run3 = run3 - 3*a) %>%
mutate(run4 = run4 - 4*a) %>%
mutate(run5 = run5 - 6*a) %>%
mutate(run6 = run6 - 7*a) %>%
mutate(temperature = temperature + 3*a) %>%
mutate(temperature_input = temperature_input + 7*a)
colnames(fish1_state2)[2:9] <- legend_label
fish1_state2 <- fish1_state2 %>% pivot_longer(cols = -time_id) %>% arrange(time_id, name)
Fig_FishState1 <- fish1_state2 %>%
ggplot(aes(x = time_id, y = value, color = name)) +
geom_hline(yintercept = c(0,-1,-3,-4,-6,-7)*a, linetype = 2) +
geom_line() +
theme(axis.text.y = element_blank()) +
scale_color_manual(values = c("darkred", "darkred",
"orange2", "orange2",
"darkblue", "darkblue", "red4", "red3")) +
xlab("Time step") +
NULL
# Figure: Reservoir state of empirical fish catch time series (Maaji)
fish2_state2 <- fish2_state %>%
mutate(run2 = run2 - 1*a) %>%
mutate(run3 = run3 - 3*a) %>%
mutate(run4 = run4 - 4*a) %>%
mutate(run5 = run5 - 6*a) %>%
mutate(run6 = run6 - 7*a) %>%
mutate(temperature = temperature + 3*a) %>%
mutate(temperature_input = temperature_input + 7*a)
colnames(fish2_state2)[2:9] <- legend_label
fish2_state2 <- fish2_state2 %>% pivot_longer(cols = -time_id) %>% arrange(time_id, name)
Fig_FishState2 <- fish2_state2 %>%
ggplot(aes(x = time_id, y = value, color = name)) +
geom_hline(yintercept = c(0,-1,-3,-4,-6,-7)*a, linetype = 2) +
geom_line() +
theme(axis.text.y = element_blank()) +
scale_color_manual(values = c("darkred", "darkred",
"orange2", "orange2",
"darkblue", "darkblue", "red4", "red3")) +
xlab("Time step") +
NULL
# Reservoir state all
state_legend <- get_legend(Fig_LorenzState0)
Fig_ReservoirState <- plot_grid(Fig_LorenzState0 + theme(legend.position = "none"),
Fig_FishState1 + theme(legend.position = "none"),
Fig_FishState2 + theme(legend.position = "none"),
plot_grid(NULL, state_legend, ncol = 2, rel_widths = c(1,2)),
rel_widths = c(1, 1),
ncol = 2, labels = c("a","b","c", NULL))
# Figure: Prediction capacity
fs <- 12
Fig_PredictTP <- plot_grid(lorenz_fig[[1]] + theme(legend.position = c(0.1, 0.9), plot.title = element_text(size = fs)) +
ylim(0.75,1.3) +
ggtitle(expression(paste("Lorenz attractor"))) +
xlab("Prediction (min)"),
fish1_fig[[1]] + ylim(0.9, 1.8) +
ggtitle(expression(paste("Flatfish: ", italic("Paralichthys olivaceus")))) +
theme(legend.position = "none", plot.title = element_text(size = fs)),
fish2_fig[[1]] + ylim(0.45,1.3) +
ggtitle(expression(paste("Jack mackerel : ", italic("Trachrus japonicus")))) +
theme(legend.position = "none", plot.title = element_text(size = fs)),
ncol = 3, align = "hv", labels = c("a", "b", "c"))
Fig_PredictTS <- plot_grid(lorenz_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 22 time step future (Lorenz)")),
fish1_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 95 weeks future (flatfish)")),
fish2_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 20 weeks future (Japanese jack mackerel)")),
ncol = 1, align = "hv", labels = c("d", "e", "f"))
Fig_Predict <- plot_grid(Fig_PredictTP, Fig_PredictTS,
rel_heights = c(1,3),
ncol = 1)
# <----------------------------------------------------> #
#                  Save figures
# <----------------------------------------------------> #
ggsave(file = sprintf("%s/Fig_GrowthTemp.pdf", fig_output_dir),
device = cairo_pdf,
plot = Fig_TempEffect, width = 8, height = 9)
ggsave(file = sprintf("%s/Fig_GrowthMedium.pdf", fig_output_dir),
device = cairo_pdf,
plot = Fig_MediumEffect, width = 8, height = 9)
ggsave2(sprintf("%s/Fig_RealTime_CellCount.pdf", fig_output_dir),
Fig_CellCount, width = 8, height = 10)
ggsave2(sprintf("%s/Fig_RealTime_ReservoirState.pdf", fig_output_dir),
Fig_ReservoirState, width = 12, height = 12)
ggsave2(sprintf("%s/Fig_RealTime_Predict2.pdf", fig_output_dir),
Fig_Predict, width = 10, height = 12)
####
#### Assemble figures for ERC paper
#### Real-time ERC figures
####
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.1, 2021.8.5
library(cowplot); packageVersion("cowplot") # 1.1.1, 2021.8.5
library(ggsci); packageVersion("ggsci") # 2.9, 2021.3.30
library(viridis); packageVersion("viridis") # 0.6.1, 2021.8.5
library(magick); packageVersion("magick") # 2.7.2, 2021.8.5
options('tibble.print_max' = 20)
theme_set(theme_cowplot())
# <----------------------------------------------------> #
#            Specify input/output directory
# <----------------------------------------------------> #
# Create figure output directory
fig_output_dir <- "0_FormattedFigs"
temp_input_dir1 <- "../02_ERCrealtime/v202103_runif_all/00_RunData/v20210226_runif01"
fig_input_dir1 <- "../02_ERCrealtime/v202103_runif_all/03_MeasureMCOut"
fig_input_dir2 <- "../02_ERCrealtime/v202103_lorenz_all/03_PredictionOut"
fig_input_dir3 <- "../02_ERCrealtime/v202103_fishts_all/03_PredictionOut"
fig_input_dir4 <- "../02_ERCrealtime/v202103_runif_all/02_MeasureMCOut"
fig_input_dir5 <- "../02_ERCrealtime/v202103_lorenz_all/02_PredictionOut"
fig_input_dir6 <- "../02_ERCrealtime/v202103_fishts_all/02_PredictionOut"
fig_input_dir7 <- "../02_ERCrealtime/v202105_fishts_all/03_PredictionOut"
fig_input_dir8 <- "../02_ERCrealtime/v202103_runif_all/04_ThermometerOut"
fig_input_dir9 <- "../02_ERCrealtime/v202103_runif_all/04_ThermometerOut"
dir.create(fig_output_dir)
# <----------------------------------------------------> #
#                   Load figure data
# <----------------------------------------------------> #
# Experimental setup illustration
fig_setup <- image_read("0_Illustrations/ERCpaper_Fig4_v7.jpg")
# Random uniform input
runif_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir1))
runif_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir1))
runif_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir1))
runif_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir1))
runif_raw <- readRDS(sprintf("%s/ReservoirState0.obj", fig_input_dir4))
runif_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir1))
temp_input_df <- read_csv(sprintf("%s/03_CompileDataOut/data_all.csv", temp_input_dir1))[1:(5*256),]
# Tetrahymena thermometer
thermo_raw_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir8))
thermo_5min_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir9))
# Lorenz attractor
lorenz_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir2))
lorenz_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir2))
lorenz_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir2))
lorenz_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir2))
lorenz_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir2))
# Fish catch time-series (Hirame)
fish1_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir3))
fish1_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir3))
fish1_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir3))
fish1_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir3))
fish1_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir3))
# Fish catch time-series (Maaji)
fish2_fig <- readRDS(sprintf("%s/FigObject.obj", fig_input_dir7))
fish2_parm <- readRDS(sprintf("%s/ParameterList.obj", fig_input_dir7))
fish2_result <- readRDS(sprintf("%s/ReservoirResult.obj", fig_input_dir7))
fish2_state <- readRDS(sprintf("%s/ReservoirState.obj", fig_input_dir7))
fish2_example <- readRDS(sprintf("%s/ResultExample.obj", fig_input_dir7))
# <----------------------------------------------------> #
#                  Format figures
# <----------------------------------------------------> #
# Experimental setup
Fig_ExpImage <- ggdraw() + draw_image(fig_setup)
## Add value range for temperature
m_input_t <- mean(temp_input_df$temperature_input)
sd_input_t <- sd(temp_input_df$temperature_input)
m_med_t <- mean(temp_input_df$temperature)
sd_med_t <- sd(temp_input_df$temperature)
#runif_raw$dif_run1_2 <- abs(runif_raw$run1 - runif_raw$run2)
# Figure: Echo State Property
a <- 1.2
a2 <- 1.3
a3 <- 0.8
runif_state2 <- runif_raw %>%
mutate(run2 = run2 - 1*a) %>%
mutate(run3 = run3*2 - 3*a) %>%
mutate(run4 = run4*2 - 4*a) %>%
mutate(run5 = run5*2 - 6*a) %>%
mutate(run6 = run6*2 - 7*a) %>%
mutate(run11 = run11*3 - 9*a) %>%
mutate(temperature = temperature/a2 + 3*a) %>%
mutate(temperature_input = temperature_input/a3 + 8*a)
legend_label <- c("Temperature (input)","Temperature (medium)",
"Med. nutrient 1", "Med. nutrient 2",
"Low nutrient 1", "Low nutrient 2",
"High nutrient 1", "High nutrient 2", # "High nutrient 3",
"Response to different inputs")
colnames(runif_state2)[2:10] <- legend_label
runif_state2 <- runif_state2 %>% pivot_longer(cols = -time_id)
runif_state2$name <- factor(runif_state2$name, levels = legend_label)
## Calculate y-axis values for temperature
min_med_t <- (14 - m_med_t)/sd_med_t/a2 + 3*a
max_med_t <- (25 - m_med_t)/sd_med_t/a2 + 3*a
min_input_t <- (10 - m_input_t)/sd_input_t/a3 + 8*a
max_input_t <- (25 - m_input_t)/sd_input_t/a3 + 8*a
## Generate figure
Fig_RunifState0 <- runif_state2 %>%
ggplot(aes(x = time_id, y = value, color = name)) +
geom_hline(yintercept = c(0, -1, -3, -4, -6, -7, -9)*a, linetype = 2) +
geom_line(alpha = 1) +
geom_segment(x = -35, xend = -35, y = min_med_t, yend = max_med_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
geom_segment(x = -45, xend = -25, y = min_med_t, yend = min_med_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
geom_segment(x = -45, xend = -25, y = max_med_t, yend = max_med_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
annotate("text", x = -90, y = min_med_t, label = expression(paste("14", degree, "C"))) +
annotate("text", x = -90, y = max_med_t, label = expression(paste("25", degree, "C"))) +
geom_segment(x = -35, xend = -35, y = min_input_t, yend = max_input_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
geom_segment(x = -45, xend = -25, y = min_input_t, yend = min_input_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
geom_segment(x = -45, xend = -25, y = max_input_t, yend = max_input_t, alpha = 0.2, linewidth = 0.3, color = "gray10") +
annotate("text", x = -90, y = min_input_t, label = expression(paste("10", degree, "C"))) +
annotate("text", x = -90, y = max_input_t, label = expression(paste("25", degree, "C"))) +
xlim(-90, 1300) +
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
legend.position = "top") +
#scale_color_manual(values = c("red4", "red3",
#                              "royalblue", "red3",
#                              "royalblue", "red3",
#                              "royalblue", "red3",
#                              "gray20")) +
#annotate("text", x = -30, y = 1.5, label = "4% of modified Neff", hjust = 0, size = 6) +
#annotate("text", x = -30, y = -1.25, label = "1.6% of modified Neff", hjust = 0, size = 6) +
#annotate("text", x = -30, y = -4, label = "10% of modified Neff", hjust = 0, size = 6) +
scale_color_manual(values = c("red4", "red3",
"darkblue", "darkblue",
"orange2", "orange2",
"darkred", "darkred", #"darkred",
"gray20"), name = NULL) +
xlab("Time step") +
NULL
# ESP: Time series plot
Fig_ESP1 <- ggplot(runif_raw, aes(x = time_id, y = abs(run1 - run2))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, k=3), color = "red3", se = FALSE) +
xlab("Time step") + ylab("Abs(Run1 - Run2)") +
ylim(0, 1.1) +
NULL
Fig_ESP2 <- ggplot(runif_raw, aes(x = time_id, y = abs(run3 - run4))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, k=3), color = "red3", se = FALSE) +
xlab("Time step") + ylab("Abs(Run3 - Run4)") +
ylim(0, 1.1) +
NULL
Fig_ESP3 <- ggplot(runif_raw, aes(x = time_id, y = abs(run5 - run6))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, k=3), color = "red3", se = FALSE) +
xlab("Time step") + ylab("Abs(Run5 - Run6)") +
ylim(0, 1.1) +
NULL
Fig_ESP4 <- ggplot(runif_raw, aes(x = time_id, y = abs(run1 - run11))) +
geom_point(alpha = 0.3) +
geom_smooth(method = "gam", formula = y ~ s(x, k=3), color = "red3", se = FALSE) +
xlab("Time step") + ylab("Abs(Run1 - Run11)") +
ylim(0, 1.1) +
NULL
# Scatter plot
runif_sub <- runif_raw[780:nrow(runif_raw),]
Fig_ESP5 <- ggplot(runif_sub, aes(x = run1, y = run2)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("States of Run1") + ylab("States of Run2") +
NULL
Fig_ESP6 <- ggplot(runif_sub, aes(x = run3, y = run4)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("States of Run3") + ylab("States of Run4") +
NULL
Fig_ESP7 <- ggplot(runif_sub, aes(x = run5, y = run6)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("States of Run5") + ylab("States of Run6") +
NULL
Fig_ESP8 <- ggplot(runif_sub, aes(x = run1, y = run11)) +
geom_point(alpha = 0.3) +
geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("States of Run1") + ylab("States of Run11") +
NULL
Fig_ESPs <- plot_grid(Fig_ESP1, Fig_ESP5,
Fig_ESP2, Fig_ESP6,
Fig_ESP3, Fig_ESP7,
Fig_ESP4, Fig_ESP8,
ncol = 2, labels = c("auto"),
rel_widths = c(2,1))
# <----------------------------------------------------> #
#                    Align panels
# <----------------------------------------------------> #
# Figure: Experimental setup + reservoir state
Fig_ExpSetup <- plot_grid(Fig_ExpImage,
Fig_RunifState0,
labels = c(NA, "f"),
ncol = 1, rel_heights = c(1.5,1))
# Figure: Memory capacity
Fig_Memory1 <- plot_grid(runif_fig[[1]] +
xlim(0,75) +
ylab(expression(paste("Coef. of det. (", R^{2}, ")"))) +
theme(legend.position = c(0.2, 0.8)) +
ggtitle(NULL),
runif_fig[[2]], align = "hv",
ncol=2, labels = c("a","b"))
Fig_Thermo <- plot_grid(thermo_raw_fig[[4]] +
ggtitle(expression(paste(italic("Tetrahymena"), " thermometer measuring the medium temp."))) +
xlab("Time step") +
theme(legend.position = "top", plot.title = element_text(size = 9, face = "plain")),
thermo_raw_fig[[2]] +
ylab("Predicted temperature\n(normalized)") +
xlab("Observed temperature\n(normalized)"),
align = "hv", axis = "lrtb", rel_widths = c(1.8,1),
ncol=2, labels = c("d","e"))
Fig_MemoryCapacity <- plot_grid(Fig_Memory1,
runif_fig[[4]] +
ggtitle("Remembering temperature 5 minutes ago") +
xlab("Time step") +
theme(legend.position = "top", plot.title = element_text(size = 9, face = "plain")),
Fig_Thermo,
ncol = 1,
labels = c(NA, "c", NA))
fs <- 9
Fig_PredictTP <- plot_grid(lorenz_fig[[1]] + theme(legend.position = c(0.1, 0.9), plot.title = element_text(size = fs)) + coord_cartesian(ylim = c(0.75,1.5)) + xlim(0, 25) +
ggtitle(expression(paste("Lorenz attractor"))) + xlab("Prediction (time steps)"),
fish1_fig[[1]] + coord_cartesian(ylim = c(0.4,1.65)) +
ggtitle(expression(paste("Flatfish: ", italic("Paralichthys olivaceus")))) +
theme(legend.position = "none", plot.title = element_text(size = fs)),
fish2_fig[[1]] + coord_cartesian(ylim = c(0.5,1.2)) +
ggtitle(expression(paste("Jack mackerel : ", italic("Trachrus japonicus")))) +
theme(legend.position = "none", plot.title = element_text(size = fs)),
ncol = 3, align = "hv", labels = c("a", "b", "c"))
Fig_PredictTS <- plot_grid(lorenz_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 15 time step future (Lorenz)")),
fish1_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 19 weeks future (flatfish)")),
fish2_fig[[4]] + xlab("Time step") +
ggtitle(expression("Prediction of 30 weeks future (Japanese jack mackerel)")),
ncol = 1, align = "hv", labels = c("d", "e", "f"))
Fig_Predict <- plot_grid(Fig_PredictTP, Fig_PredictTS,
rel_heights = c(1,3),
ncol = 1)
# Make Large figure
Fig_MC_Predict <- plot_grid(Fig_MemoryCapacity, NULL, Fig_Predict,
ncol = 3, rel_widths = c(1,0.1,1))
# <----------------------------------------------------> #
#                  Save figures
# <----------------------------------------------------> #
ggsave2(sprintf("%s/Fig_RealTime_Setup.pdf", fig_output_dir),
Fig_ExpSetup, width = 12, height = 14)
ggsave2(sprintf("%s/Fig_RealTime_StateESP.pdf", fig_output_dir),
Fig_ESPs, width = 9, height = 11)
ggsave2(sprintf("%s/Fig_RealTime_MC.pdf", fig_output_dir),
Fig_MemoryCapacity, width = 10, height = 12)
ggsave2(sprintf("%s/Fig_RealTime_Predict.pdf", fig_output_dir),
Fig_Predict, width = 10, height = 12)
ggsave2(sprintf("%s/Fig_RealTime_MCPredict.pdf", fig_output_dir),
Fig_MC_Predict, width = 17, height = 12)
