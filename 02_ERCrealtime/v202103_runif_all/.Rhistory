####
#### Real-time Ecological Reservoir Computing
#### No.4 Measuring memory capacity
#### 2021.1.4 v1:Automated-Tetrahymena reservoir
#### 2021.3.2 v2:Ridge regression by sklearn
#### 2021.3.9 v3:For combined analysis
####
# Import essential modules
import numpy as np
import pandas as pd
import itertools; import joblib; import time
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler
#from sklearn.linear_model import LogisticRegression
#from sklearn.metrics import accuracy_score
#from scipy import linalg
# Set pandas options
pd.set_option('display.max_rows', 30)
pd.set_option('display.max_columns', 30)
# Import custom module
import module.rt_ecological_reservoir_ridge_v2 as rt
#import importlib; importlib.reload(rt)
# Create output directory
import os; output_dir = "02_MeasureMCOut"; os.mkdir(output_dir)
# -------------------- Prepare data and set parameters -------------------- #
# Load data
#ecol_ts = pd.read_csv('./01_LoadAllDataOut/d_std_all.csv')[600:] #(1319)
ecol_ts0 = pd.read_csv('./01_LoadAllDataOut/d_all.csv')[0:] #(1319)
ecol_ts = pd.read_csv('./01_LoadAllDataOut/d_all.csv')[819:] #(1319)
#ecol_ts = pd.read_csv('./01_LoadAllDataOut/d_std_all5.csv')[0:] #(1319)
#ecol_ts = pd.read_csv('./01_LoadAllDataOut/d_all5.csv')[0:] #(1319)
ecol_ts.columns
ecol_ts.shape
train_fraction = 1/2
object_save = 5
mat_set = 2
input_col = "temperature"
# Set additional parameters
ridge_lambda = 1
delay_tp_range = np.arange(0, 60, 1)
fig_ylim = 0.7
# Run column number
#run1 = 3:7
#run2 = 8:12
#run3 = 13:17
#run4 = 18:22
#run5 = 23:27
#run6 = 28:32
#run7 = 33:37
# Compile state matrix
if mat_set == 1:
all_state_matrix = np.array(ecol_ts)[:,range(2,3)]
#all_state_matrix = np.array(ecol_ts)[:,range(3,33)]
#all_state_matrix = np.array(ecol_ts)[:,range(2,3)]
#all_state_matrix = np.array(ecol_ts)[:,[range(3,8),range(13,18),range(23,28)]]
elif mat_set == 2:
train_state_matrix = np.array(ecol_ts)[:,[3,5,7]]
test_state_matrix = np.array(ecol_ts)[:,[4,6,8]]
#train_state_matrix = np.array(ecol_ts)[:,[range(3,8),range(13,18),range(23,28)]]
#test_state_matrix = np.array(ecol_ts)[:,[range(8,13),range(18,23),range(28,33)]]
ecol_ts
1279-819
460/5
reticulate::repl_python()
library(reticulate)
library(tidyverse)
py$ecol_ts
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.1, 2021.8.22
library(cowplot); packageVersion("cowplot") # 1.1.1, 2021.8.22
library(gganimate); packageVersion("gganimate") # 1.0.7, 2021.8.22
library(gifski); packageVersion("gifski") # 1.4.3.1, 2021.8.22, For GIF animation
d1
library(gifski); packageVersion("gifski") # 1.4.3.1, 2021.8.22, For GIF animation
#library(magick); packageVersion("magick") # 2.7.2, 2021.8.5
#options('tibble.print_max' = 20)
theme_set(theme_cowplot())
# Create output folder
od <- basename(rstudioapi::getSourceEditorContext()$path)
(output_folder <- paste0(str_sub(od, end = -3), "Out")); rm(od)
dir.create(output_folder)
# <----------------------------------------------------> #
# Load figure data
# <----------------------------------------------------> #
# Create figure output directory
d1 <- read_csv("00_RunData/v20210226_runif01/03_CompileDataOut/data_all.csv")
d2 <- read_csv("00_RunData/v20210227_runif02/03_CompileDataOut/data_all.csv")
d1$time_id <- 1:nrow(d1)
d2$time_id <- 1:nrow(d2)
d1 <- d1[1:(256*5),]
d2 <- d2[1:(256*5),]
# <----------------------------------------------------> #
# Basic figures
# <----------------------------------------------------> #
(g1 <- ggplot(d1, aes(x = time_id, y = temperature_input)) +
geom_line(color = "red4") +
xlab("Time (min)") + ylab(expression(paste("Input temperature (", degree, "C)"))) +
NULL)
f1
d1
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.0, 2020.11.17
library(lubridate); packageVersion("lubridate") # 1.7.9, 2020.11.17
library(cowplot); packageVersion("cowplot") # 1.1.0, 2020.11.17
library(ggsci); packageVersion("ggsci") # 2.9, 2020.12.25
library(viridis); packageVersion("viridis") # 0.5.1, 2021.3.9
theme_set(theme_cowplot())
# Generate output folder
od <- basename(rstudioapi::getSourceEditorContext()$path)
(output_folder <- paste0(str_sub(od, end = -3), "Out")); rm(od)
dir.create(output_folder)
dir.create("00_SessionInfo")
# <---------------------------------------------> #
#                   Load data
# <---------------------------------------------> #
# "density_resid"
# "density_rel_resid"
extracted_var <- "density_rel_resid10"
std_trunclen <- 200
## Random input set1
d01 <- read_csv("00_RunData/v20210226_runif01/03_CompileDataOut/data_all.csv")
d02 <- read_csv("00_RunData/v20210227_runif02/03_CompileDataOut/data_all.csv")
d03 <- read_csv("00_RunData/v20210301_runif03/03_CompileDataOut/data_all.csv")
d04 <- read_csv("00_RunData/v20210525_runif13/03_CompileDataOut/data_all.csv")
d05 <- read_csv("00_RunData/v20210424_runif11/03_CompileDataOut/data_all.csv")
d06 <- read_csv("00_RunData/v20210427_runif12/03_CompileDataOut/data_all.csv")
#d04 <- read_csv("00_RunData/v20210421_runif08/03_CompileDataOut/data_all.csv")
#d06 <- read_csv("00_RunData/v20210304_runif06/03_CompileDataOut/data_all.csv")
#d03 <- read_csv("00_RunData/v20210301_runif03/03_CompileDataOut/data_all.csv")
#d07 <- read_csv("00_RunData/v20210302_runif04/03_CompileDataOut/data_all.csv")
#d07 <- read_csv("00_RunData/v20210422_runif09/03_CompileDataOut/data_all.csv")
#d07 <- read_csv("00_RunData/v20210423_runif10/03_CompileDataOut/data_all.csv")
#d05 <- read_csv("00_RunData/v20210303_runif05/03_CompileDataOut/data_all.csv")
#d06 <- read_csv("00_RunData/v20210424_runif11/03_CompileDataOut/data_all.csv")
## Random input set2
d11 <- read_csv("00_RunData/v20210313_runif01_v2/03_CompileDataOut/data_all.csv")
# <---------------------------------------------> #
#             Check and adjust data
# <---------------------------------------------> #
dim(d01); dim(d02); dim(d03); dim(d04)
dim(d05); dim(d06); #dim(d07)
dim(d11)
# Adjust timing based on the first 100 data points
temp_len <- 500
d_temp100 <- tibble(time_id = 1:temp_len,
temp1 = d01$temperature[1:temp_len],
temp2 = d02$temperature[1:temp_len],
temp3 = d03$temperature[1:temp_len],
temp4 = d04$temperature[1:temp_len],
temp5 = d05$temperature[1:temp_len],
temp6 = d06$temperature[1:temp_len],
#temp7 = d07$temperature[1:temp_len],
temp11 = d11$temperature[1:temp_len])
g1 <- d_temp100 %>% pivot_longer(cols = -time_id) %>% ggplot(aes(x = time_id, y = value, color = name)) +
geom_vline(xintercept = seq(1, temp_len, by = 5), color = "gray", alpha = 0.7, size = 0.3) +
geom_line(alpha = 0.5) +
geom_point(alpha = 0.5) +
scale_color_igv() +
NULL
# Calculate residuals and identify the starting point
get_adjust_id <- function(x, d_len = 500, show_plot = T, lag_range = -10:10){
adjust_resid <- c()
for(i in lag_range){
if(i < 0) adjust_resid <- c(adjust_resid, mean(abs(d01$temperature_input[10:d_len] - dplyr::lead(x$temperature_input[10:d_len], n = -i)), na.rm = T))
if(i >= 0) adjust_resid <- c(adjust_resid, mean(abs(d01$temperature_input[10:d_len] - dplyr::lag(x$temperature_input[10:d_len], n = i)), na.rm = T))
}
if(show_plot) plot(lag_range, adjust_resid, type = "b", xlab = "lag", ylab = "MAE")
return(c(lag_range)[as.integer(which.min(adjust_resid))])
}
## Adjust ID for input 1
d01_id <- get_adjust_id(d01)
d02_id <- get_adjust_id(d02)
d03_id <- get_adjust_id(d03)
d04_id <- get_adjust_id(d04)
d05_id <- get_adjust_id(d05)
d06_id <- get_adjust_id(d06)
#d07_id <- get_adjust_id(d07)
## Adjust ID for input 2
d11_id <- 0
# <---------------------------------------------> #
#             Compile new data.frame
# <---------------------------------------------> #
d_id_all <- c(d01_id, d02_id, d03_id, d04_id, d05_id, d06_id,
d11_id)
d_all00 <- list(d01, d02, d03, d04, d05, d06,
d11)
d_all <- tibble(time_id = 1:nrow(d01),
#temperature_input = as.numeric(scale(d01$temperature_input)),
#temperature = as.numeric(scale(d01$temperature)),
temperature_input = d01$temperature_input,
temperature = d01$temperature,
run1 = as.numeric(unlist(d01[,extracted_var])))
for(i in 2:length(d_id_all)){
id_i <- d_id_all[i]
d_i <- d_all00[[i]]
if(id_i < 0){
d_all <- d_all %>% mutate(dplyr::lead(d_i[,extracted_var], n = -id_i))
} else if (id_i >= 0){
d_all <- d_all %>% mutate(dplyr::lag(d_i[,extracted_var], n = id_i))
}
if(i > 6) i <- i + 4 # Adjust for random input v2
colnames(d_all)[ncol(d_all)] <- sprintf("run%s", i)
}
# Delete temporal objects
rm(i); rm(id_i); rm(d_i); rm(d_all00); rm(d_id_all)
# Trim data
d_all <- d_all[1:(5*256),]
# Standardize temperature
d_all$temperature <- as.numeric(scale(d_all$temperature))
d_all$temperature_input <- as.numeric(scale(d_all$temperature_input))
d_all_std <- na.omit(d_all[(std_trunclen + 1):nrow(d_all),])
d_all_std[,3:ncol(d_all_std)] <- apply(d_all_std[,3:ncol(d_all_std)], 2, function(x) as.numeric(scale(x)))
d_all
d_all %>% data.frame
d_all[120*5:nrow(d_all),] %>% data.frame
d_all[600:nrow(d_all),] %>% data.frame
d_all[596:nrow(d_all),] %>% data.frame
## Random input set1
d01 <- read_csv("00_RunData/v20210226_runif01/03_CompileDataOut/data_all.csv")
d02 <- read_csv("00_RunData/v20210227_runif02/03_CompileDataOut/data_all.csv")
####
#### Real-time ERC: No.1 Load all data
####
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.0, 2020.11.17
library(lubridate); packageVersion("lubridate") # 1.7.9, 2020.11.17
library(cowplot); packageVersion("cowplot") # 1.1.0, 2020.11.17
library(ggsci); packageVersion("ggsci") # 2.9, 2020.12.25
library(viridis); packageVersion("viridis") # 0.5.1, 2021.3.9
theme_set(theme_cowplot())
# Generate output folder
od <- basename(rstudioapi::getSourceEditorContext()$path)
(output_folder <- paste0(str_sub(od, end = -3), "Out")); rm(od)
dir.create(output_folder)
dir.create("00_SessionInfo")
# <---------------------------------------------> #
#                   Load data
# <---------------------------------------------> #
extracted_var <- "density_rel_resid10"
std_trunclen <- 200
## Random input set1
d01 <- read_csv("00_RunData/v20210226_runif01/03_CompileDataOut/data_all.csv")
d02 <- read_csv("00_RunData/v20210227_runif02/03_CompileDataOut/data_all.csv")
d03 <- read_csv("00_RunData/v20210301_runif03/03_CompileDataOut/data_all.csv")
d04 <- read_csv("00_RunData/v20210525_runif13/03_CompileDataOut/data_all.csv")
d05 <- read_csv("00_RunData/v20210424_runif11/03_CompileDataOut/data_all.csv")
d06 <- read_csv("00_RunData/v20210427_runif12/03_CompileDataOut/data_all.csv")
## Random input set2
d11 <- read_csv("00_RunData/v20210313_runif01_v2/03_CompileDataOut/data_all.csv")
