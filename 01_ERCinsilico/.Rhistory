####
#### Reservoir computing
#### No.11: Calculating ESP index for simplex reservoir
####
# Import essential modules
import numpy as np
import pandas as pd
import time; import joblib
from scipy import linalg
# Set pandas options
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
# Import custom module
import module.predict_by_ecological_reservoir_v1 as erc
# Create output directory
import os; output_dir = "11_ESPindex_TSpredOut"; os.mkdir(output_dir)
# -------------------- 0. Set global parameters -------------------- #
# Prepare output dataframe
#output_all_df = pd.DataFrame()
# Load time series
lorenz = pd.read_csv('./data/LorenzTS_tau10.csv')
ecol_ts = pd.read_csv('./data/edna_asv_table_prok_all.csv')
#fish_ts = pd.read_csv('./data/BCreation_s0001_weekly.csv')
rand_ts = pd.read_csv('./data/runif_ts.csv', index_col = 0)
rand_ts2 = pd.read_csv('./data/runif_ts2.csv', index_col = 0)
best_e = pd.read_csv("./data/bestE_all.csv")
target_ts, target_var, target_db_name, test_fraction = rand_ts2[0:3000], 'random_01', 'random', 0.2
# Load the best results
## Select the top N species
n_sp1 = 500
n_sp2 = 47
rep_per_sp = 5
## Top 100 prokaryote names
prok_dom = ecol_ts.sum(axis=0)[1:][np.argsort(ecol_ts.sum(axis=0)[1:])[::-1]][:n_sp1]
prok_var = prok_dom.index
fish_dom = fish_ts.sum(axis=0)[1:][np.argsort(fish_ts.sum(axis=0)[1:])[::-1]][:n_sp2]
fish_var = fish_dom.index
