erc_mc_glist <- list(erc_forget_comb, erc_mc)
saveRDS(erc_mc_glist, sprintf("%s/Figs_ERC_MemoryCapacity.obj", obj_output_dir))
rm(list=ls())
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(rEDM); packageVersion("rEDM") # 0.7.5
options('tibble.print_max' = 1000)
theme_set(theme_cowplot())
# Create figure output directory
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
#dir.create("XXX")
# Identify parent director and change working directory
path_element <- str_split(rstudioapi::getSourceEditorContext()$path, pattern = "/")[[1]]
my_dir <- path_element %>% .[-length(.)] %>% paste(collapse = "/")
parent_dir <- path_element %>% .[-c(length(.)-1, length(.))] %>% paste(collapse = "/")
setwd(parent_dir); getwd()
repl_python()
#::::::::::::::::::::::::::::::::::::::::::::::::::#
#::::::::::::::::::::::::::::::::::::::::::::::::::#
# Reset working directory
setwd(my_dir)
# <----------------------------------------------------> #
#     Visualize Forgotten curve and Memory Capacity
# <----------------------------------------------------> #
# Patterns in the predicted values
erc_df_train <- data.frame(time = 1:length(py$erc_mackey_taxa1$train_predicted),
obs = py$erc_mackey_taxa1$train_true[(py$erc_mackey_taxa1$washout+2):(length(py$erc_mackey_taxa1$train_true))],
pred = py$erc_mackey_taxa1$train_predicted)
erc_df_test <- data.frame(time = 1:length(py$erc_mackey_taxa1$test_true),
obs = py$erc_mackey_taxa1$test_true,
pred = py$erc_mackey_taxa1$test_predicted)
erc_df_test_lag <- data.frame(time = 1:length(py$erc_mackey_taxa1$test_true),
obs = dplyr::lag(erc_df_test$obs, n = 17),
pred = dplyr::lag(erc_df_test$pred, n = 17))
erc_df_melt <- pivot_longer(erc_df_test, cols = -1, names_to = "variable", values_to = "value")
erc_df_melt_lag <- pivot_longer(erc_df_test_lag, cols = -1, names_to = "variable", values_to = "value")
erc_df_melt_lag$unlagged_value <- erc_df_melt$value
mackey_g1 <- ggplot(erc_df_test, aes(x = obs, y = pred)) +
geom_point() + geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("Observed") + ylab("Predicted")
mackey_g2 <- ggplot(erc_df_melt, aes(x = time, y = value, color = variable, linetype = variable, alpha = variable)) +
geom_line() + geom_point() + ggtitle("Macky-Glass equation (ERC)") +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("Time") + ylab("Value")
mackey_g3 <- ggplot(erc_df_melt_lag, aes(x = unlagged_value, y = value,
color = variable, linetype = variable, alpha = variable)) +
geom_point() +
#geom_line() +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("t") + ylab("t-17")
# <----------------------------------------------------> #
#                     Save figures
# <----------------------------------------------------> #
mackey_all <- plot_grid(mackey_g2,
plot_grid(mackey_g1, mackey_g3, rel_widths = c(1,1.2)),
ncol = 1)
pdf(sprintf("%s/Fig_MackeyGlass_ERC.pdf", fig_output_dir), width = 10, height = 8)
mackey_all; dev.off()
mackey_erc_glist <- list(mackey_g1, mackey_g2, mackey_g3)
saveRDS(mackey_erc_glist, sprintf("%s/Figs_ERC_MackeyGlass.obj", obj_output_dir))
rm(list=ls())
# Load library
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(ggsci); packageVersion("ggsci") # 2.9
library(gg3D); packageVersion("gg3D") # 0.0.0.900, 2021.5.5
library(lubridate); packageVersion("lubridate") # 1.7.9.2, 2021.5.5
theme_set(theme_cowplot())
rm(list=ls())
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(rEDM); packageVersion("rEDM") # 0.7.5
library(ggsci); packageVersion("ggsci") # 2.9
theme_set(theme_cowplot())
options('tibble.print_max' = 1000)
# Create figure output directory
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
# Identify parent director and change working directory
path_element <- str_split(rstudioapi::getSourceEditorContext()$path, pattern = "/")[[1]]
my_dir <- path_element %>% .[-length(.)] %>% paste(collapse = "/")
parent_dir <- path_element %>% .[-c(length(.)-1, length(.))] %>% paste(collapse = "/")
setwd(parent_dir); getwd()
repl_python()
#::::::::::::::::::::::::::::::::::::::::::::::::::#
#::::::::::::::::::::::::::::::::::::::::::::::::::#
# Reset working directory
setwd(my_dir)
# <----------------------------------------------------> #
#                  Load ESN results
# <----------------------------------------------------> #
esn_df_out1 = read.csv("../01_ESN_LorenzPredOut/ESN_output_df1.csv")
esn_df_out2 = read.csv("../01_ESN_LorenzPredOut/ESN_output_df2.csv")
esn_df_out3 = read.csv("../01_ESN_LorenzPredOut/ESN_output_df3.csv")
# esn_df_out4 = read.csv("../01_ESN_LorenzPredOut/ESN_output_df4.csv")
# esn_df_out5 = read.csv("../01_ESN_LorenzPredOut/ESN_output_df5.csv")
esn_mn_E003 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E003.csv")
esn_mn_E005 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E005.csv")
esn_mn_E010 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E010.csv")
esn_mn_E020 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E020.csv")
esn_mn_E030 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E030.csv")
esn_mn_E040 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E040.csv")
esn_mn_E050 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E050.csv")
esn_mn_E100 = read.csv("../01_ESN_LorenzPredOut/MultiNetowrk_E100.csv")
esn_sngl = read.csv("../01_ESN_LorenzPredOut/SingleNetwork_E1000.csv")
esn_mn_all <- rbind(esn_mn_E003, esn_mn_E005, esn_mn_E010, esn_mn_E020,
esn_mn_E030, esn_mn_E040, esn_mn_E050, esn_mn_E100)
# Load reservoir time series
lorenz <- read.csv("../data/LorenzTS_tau10.csv")
logis_ts <- read.csv("../data/logistic_Xr2_92Yr2_90.csv")
ecol_ts <- read.csv("../data/edna_asv_table_prok_all.csv")
#fish_ts <- read.csv("../data/BCreation_s0001_weekly.csv")
#narma02 <- read.csv("../data/NARMA02.csv")
#narma05 <- read.csv("../data/NARMA05.csv")
#narma10 <- read.csv("../data/NARMA10.csv")
#mackey <- read.csv("../data/mackey_glass17.csv")
ecol_ts$time_index <- rep(1:153, 5)
ecol_ts$plot <- c(rep("Plot 1", 153), rep("Plot 2", 153), rep("Plot 3", 153), rep("Plot 4", 153), rep("Plot 5", 153))
# Visualize Lorenz and logistic time series ---------------------------------- #
g_lorenz_x <- ggplot(lorenz, aes(x = time, y = x)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(0,50)
g_lorenz_y <- ggplot(lorenz, aes(x = time, y = y)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(0,50)
g_lorenz_z <- ggplot(lorenz, aes(x = time, y = z)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(0,50)
g_logis_x <- ggplot(logis_ts, aes(x = time, y = x)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(0,150)
g_logis_y <- ggplot(logis_ts, aes(x = time, y = y)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(0,150)
g_ecol <- ggplot(ecol_ts, aes(x = time_index, y = Prok_Taxa00005, color = plot)) + geom_line(linewidth = 0.3) +
xlab("Date index") + ylab("DNA copy numbers") + scale_color_startrek() + xlim(23, 150)
g_fish <- ggplot(fish_ts, aes(x = index, y = マアジ)) + geom_line(linewidth = 0.3) +
xlab("Week index") + ylab("Fish abundance\n(catch/unit)")
# g_fish <- ggplot(fish_ts, aes(x = index, y = マアジ)) + geom_line(linewidth = 0.3) +
#   xlab("Week index") + ylab("Fish abundance\n(catch/unit)")
g_narma02 <- ggplot(narma02, aes(x = time, y = value)) + geom_line(linewidth = 0.3) + xlab("Time") + xlim(100,400)
#logis_block <- rEDM::make_block(logis_ts[,1:2], max_lag = 3)
g_logis_xy <- ggplot(logis_ts, aes(x = x, y = y)) + geom_point()
# Visualize Echo State Network ---------------------------------- #
esn_df_train <- data.frame(time = 1:length(py$rand_esn$train_predicted),
obs = py$rand_esn$train_true[(py$rand_esn$washout+1):length(py$rand_esn$train_true)],
pred = py$rand_esn$train_predicted)
esn_df_test <- data.frame(time = 1:length(py$rand_esn$test_true),
obs = py$rand_esn$test_true,
pred = py$rand_esn$test_predicted)
esn_df_melt <- pivot_longer(esn_df_test, cols = -1, names_to = "variable", values_to = "value")
esn_g1 <- ggplot(esn_df_test, aes(x = obs, y = pred)) +
geom_point() + geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("Observed") + ylab("Predicted") + ggtitle("Random reservoir\n(Equation)")
esn_g2 <- ggplot(esn_df_melt, aes(x = time, y = value, color = variable, linetype = variable, alpha = variable)) +
geom_line() + geom_point() + ggtitle("Random reservoir\n(Equation)") +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("Time") + ylab("Value")
esn_g3 <- ggplot(esn_df_out1, aes(x = num_nodes, y = rho_test)) +
geom_point() + geom_line() + ylim(0.94, 1) +
scale_x_log10(limits = c(10, 1001)) +
xlab("Reservoir size") + ylab("Correlation coefficient") + ggtitle("Echo State Network")
esn_g3_1 <- ggplot(esn_df_out2, aes(x = alpha, y = rho_test)) +
geom_point() + geom_line() + ylim(0.845, 1) +
xlab(expression(alpha)) + ylab("Correlation coefficient") + ggtitle("Echo State Network")
esn_g3_2 <- esn_df_out3 %>% group_by(Win_sparsity, Win_strength) %>%
summarize(Win_sparsity = Win_sparsity, Win_strength = Win_strength, rho_test = mean(rho_test)) %>%
ggplot(aes(x = Win_sparsity, y = Win_strength, z = rho_test)) +
geom_contour_filled() + xlab("Win_sparsity") + ylab("Win_strength") +
NULL
esn_g3_3 <- esn_df_out3 %>% group_by(Win_sparsity, W_sparsity) %>%
summarize(Win_sparsity = Win_sparsity, W_sparsity = W_sparsity, rho_test = mean(rho_test)) %>%
ggplot(aes(x = Win_sparsity, y = W_sparsity, z = rho_test)) +
geom_contour_filled() + xlab("Win_sparsity") + ylab("W_sparsity") +
NULL
esn_g3_4 <- esn_df_out3 %>% group_by(Win_strength, W_sparsity) %>%
summarize(Win_sparsity = Win_strength, W_sparsity = W_sparsity, rho_test = mean(rho_test)) %>%
ggplot(aes(x = Win_strength, y = W_sparsity, z = rho_test)) +
geom_contour_filled() + xlab("Win_strength") + ylab("W_sparsity") +
NULL
esn_g3_4
esn_g4_1 <- ggplot(esn_mn_all, aes(x = total_nodes, y = test_pred, color = as.factor(E))) +
geom_point() + geom_line() + ylim(0.83, 1.0) + scale_color_igv() + scale_x_log10(limits = c(1,11000)) + labs(color = "Reservoir\nsize") +
xlab("Total number of nodes") + ylab("Correlation coefficient") + ggtitle("Echo State Network") +
geom_point(data = esn_sngl, aes(x = num_nodes, y = rho_test), color = "black") +
geom_line(data = esn_sngl, aes(x = num_nodes, y = rho_test), color = "black", linetype = 2)
esn_g4_2 <- ggplot(esn_mn_all, aes(x = n_network, y = test_pred, color = as.factor(E))) +
geom_point() + geom_line() + ylim(0.83, 1.0) + scale_color_igv() + scale_x_log10(limits = c(1, 300)) + labs(color = "Reservoir\nsize") +
xlab("Number of networks") + ylab("Correlation coefficient") + ggtitle("Echo State Network")
# <----------------------------------------------------> #
#                      Save figures
# <----------------------------------------------------> #
esn_g4_all <- plot_grid(esn_g4_1, esn_g4_2, ncol = 2)
pdf(sprintf("%s/Fig_LorenzPred_ESN_MultiNetwork.pdf", fig_output_dir), width = 14, height = 6)
esn_g4_all; dev.off()
ts_all_glist <- list(g_lorenz_x, g_lorenz_y, g_lorenz_z, g_logis_x, g_logis_y)
#g_ecol, g_fish, g_narma02, g_mackey, g_logis_xy)
esn_all_glist <- list(esn_g1, esn_g2, esn_g3,
esn_g3_1, esn_g3_2, esn_g3_3, esn_g3_4,
esn_g4_1, esn_g4_2)
saveRDS(ts_all_glist, sprintf("%s/Figs_TimeSeriesExample.obj", obj_output_dir))
saveRDS(esn_all_glist, sprintf("%s/Figs_ESN_LorenzPred.obj", obj_output_dir))
rm(list=ls())
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(rEDM); packageVersion("rEDM") # 0.7.5
options('tibble.print_max' = 1000)
theme_set(theme_cowplot())
# Create figure output directory
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
# Identify parent director and change working directory
path_element <- str_split(rstudioapi::getSourceEditorContext()$path, pattern = "/")[[1]]
my_dir <- path_element %>% .[-length(.)] %>% paste(collapse = "/")
parent_dir <- path_element %>% .[-c(length(.)-1, length(.))] %>% paste(collapse = "/")
setwd(parent_dir); getwd()
repl_python()
#::::::::::::::::::::::::::::::::::::::::::::::::::#
#::::::::::::::::::::::::::::::::::::::::::::::::::#
# Reset working directory
setwd(my_dir)
# Load output data
esn_df_out1 = read.csv("../05_ESN_NARMAEmlOut/ESN_narma10_df1.csv")
esn_df_out2 = read.csv("../05_ESN_NARMAEmlOut/ESN_narma10_df2.csv")
esn_df_out3 = read.csv("../05_ESN_NARMAEmlOut/ESN_narma10_df3.csv")
esn_df_out4 = read.csv("../05_ESN_NARMAEmlOut/ESN_narma10_df4.csv")
# Load NARMA results
esn_df_narma02 <- data.frame(time = 1:length(py$rand_esn02$test_true),
NARMA02 = py$rand_esn02$test_true,
Emulated = py$rand_esn02$test_predicted)
esn_df_narma03 <- data.frame(time = 1:length(py$rand_esn03$test_true),
NARMA03 = py$rand_esn03$test_true,
Emulated = py$rand_esn03$test_predicted)
esn_df_narma04 <- data.frame(time = 1:length(py$rand_esn04$test_true),
NARMA04 = py$rand_esn04$test_true,
Emulated = py$rand_esn04$test_predicted)
esn_df_narma05 <- data.frame(time = 1:length(py$rand_esn05$test_true),
NARMA05 = py$rand_esn05$test_true,
Emulated = py$rand_esn05$test_predicted)
esn_df_narma10 <- data.frame(time = 1:length(py$rand_esn$test_true),
NARMA10 = py$rand_esn$test_true,
Emulated = py$rand_esn$test_predicted)
# <----------------------------------------------------> #
#            Visualize Logistic Reservoir
# <----------------------------------------------------> #
esn_df_train <- data.frame(time = 1:length(py$rand_esn$train_predicted),
NARMA10 = py$rand_esn$train_true[(py$rand_esn$washout+1):length(py$rand_esn$train_true)],
Emulated = py$rand_esn$train_predicted)
esn_df_test <- data.frame(time = 1:length(py$rand_esn$test_true),
NARMA10 = py$rand_esn$test_true,
Emulated = py$rand_esn$test_predicted)
esn_df_melt <- pivot_longer(esn_df_test, cols = -1, names_to = "variable", values_to = "value")
esn_df_melt$variable <- factor(esn_df_melt$variable, levels = c("NARMA10", "Emulated"))
esn_g1 <- ggplot(esn_df_test, aes(x = NARMA10, y = Emulated)) +
geom_point() + geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("NARMA10") + ylab("Emulated") + ggtitle("Echo State Network")
esn_g2 <- ggplot(esn_df_melt, aes(x = time, y = value, color = variable, linetype = variable, alpha = variable)) +
geom_line() + geom_point() + ggtitle("Echo State Network") +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("Time") + ylab("Value") + xlim(0,200)
esn_g3 <- ggplot(esn_df_out1, aes(x = num_nodes, y = NMSE_test)) +
geom_point() + geom_line() + ylim(0, 0.15) +
scale_x_log10(limits = c(10, 1001)) +
xlab("Reservoir size") + ylab("NMSE") + ggtitle("Echo State Network")
max(esn_df_out2$NMSE_test, esn_df_out3$NMSE_test, esn_df_out4$NMSE_test)
ymin1 <- 0; ymax1 <- 0.3
esn_g3_1 <- ggplot(esn_df_out2, aes(x = alpha, y = NMSE_test)) +
geom_point() + geom_line() + ylim(ymin1, ymax1) +
xlab(expression(alpha)) + ylab("NMSE") + ggtitle("Echo State Network")
esn_g3_2 <- ggplot(esn_df_out3, aes(x = leak_rate, y = NMSE_test)) +
geom_point() + geom_line() + ylim(ymin1, ymax1) +
xlab("Leak rate") + ylab("NMSE") + ggtitle("Echo State Network")
esn_g3_3 <- esn_df_out4 %>% group_by(Win_sparsity, Win_strength) %>%
summarize(Win_sparsity = Win_sparsity, Win_strength = Win_strength, NMSE_test = mean(NMSE_test)) %>%
ggplot(aes(x = Win_sparsity, y = Win_strength, z = NMSE_test)) +
geom_contour_filled() + xlab("Win_sparsity") + ylab("Win_strength") +
NULL
esn_g3_4 <- esn_df_out4 %>% group_by(Win_sparsity, W_sparsity) %>%
summarize(Win_sparsity = Win_sparsity, W_sparsity = W_sparsity, NMSE_test = mean(NMSE_test)) %>%
ggplot(aes(x = Win_sparsity, y = W_sparsity, z = NMSE_test)) +
geom_contour_filled() + xlab("Win_sparsity") + ylab("W_sparsity") +
NULL
esn_g3_5 <- esn_df_out4 %>% group_by(W_sparsity, Win_strength) %>%
summarize(W_sparsity = W_sparsity, Win_strength = Win_strength, NMSE_test = mean(NMSE_test)) %>%
ggplot(aes(x = W_sparsity, y = Win_strength, z = NMSE_test)) +
geom_contour_filled() + xlab("W_sparsity") + ylab("Win_strength") +
NULL
# <----------------------------------------------------> #
#                      Save figures
# <----------------------------------------------------> #
esn_g_all1 <- plot_grid(esn_g1, esn_g2, rel_widths = c(1,2), ncol = 2)
esn_g_all2 <- plot_grid(esn_g3, esn_g3_1, esn_g3_2, esn_g3_3, esn_g3_4, esn_g3_5, ncol = 3)
pdf(sprintf("%s/Fig_NARMA_ESN1.pdf", fig_output_dir), width = 12, height = 4)
esn_g_all1; dev.off()
pdf(sprintf("%s/Fig_NARMA_ESN2.pdf", fig_output_dir), width = 12, height = 8)
esn_g_all2; dev.off()
# Save listed objects
esn_narma_glist <- list(esn_g1, esn_g2, esn_g3, esn_g3_1, esn_g3_2, esn_g3_3, esn_g3_4)
esn_narma_dfs <- list(esn_df_narma02, esn_df_narma03, esn_df_narma04, esn_df_narma05, esn_df_narma10)
saveRDS(esn_narma_glist, sprintf("%s/Figs_ESN_NARMA.obj", obj_output_dir))
saveRDS(esn_narma_dfs, sprintf("%s/ESN_NARMA_results.obj", obj_output_dir))
rm(list=ls())
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(rEDM); packageVersion("rEDM") # 0.7.5
options('tibble.print_max' = 1000)
theme_set(theme_cowplot())
# Create figure output directory
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
# Load output data
esn_df_out1 = read.csv("../07_ESN_MemoryOut/ESN_Memory_df.csv")
esn_df_out2 = read.csv("../07_ESN_MemoryOut/ESN_MemoryCapacity.csv")
# <----------------------------------------------------> #
#     Visualize Forgotten curve and Memory Capacity
# <----------------------------------------------------> #
esn_forget <- ggplot(esn_df_out1, aes(x = delay, y = test_pred^2)) +
geom_point() + geom_line() + xlab("Time step") + ylab(expression(R^2))
esn_mc <- ggplot(esn_df_out2, aes(x = num_nodes, y = memory_capacity, group = factor(alpha), color = factor(alpha))) +
geom_point() + geom_line() + xlab("Reservoir size") + ylab("Memory capacity") + scale_color_viridis_d(name = expression(alpha))
# <----------------------------------------------------> #
#                      Save figures
# <----------------------------------------------------> #
esn_mc_all <- plot_grid(esn_forget, esn_mc, ncol = 1, align = "hv", axis = "lrbt")
pdf(sprintf("%s/Fig_MemoryCapacity_ESN.pdf", fig_output_dir), width = 8, height = 8)
esn_mc_all; dev.off()
# Save listed objects
esn_mc_glist <- list(esn_forget, esn_mc)
saveRDS(esn_mc_glist, sprintf("%s/Figs_ESN_MemoryCapacity.obj", obj_output_dir))
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(rEDM); packageVersion("rEDM") # 0.7.5
options('tibble.print_max' = 1000)
theme_set(theme_cowplot())
# <----------------------------------------------------> #
#                       Load data
# <----------------------------------------------------> #
# Create figure output directory
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
# Identify parent director and change working directory
path_element <- str_split(rstudioapi::getSourceEditorContext()$path, pattern = "/")[[1]]
my_dir <- path_element %>% .[-length(.)] %>% paste(collapse = "/")
parent_dir <- path_element %>% .[-c(length(.)-1, length(.))] %>% paste(collapse = "/")
setwd(parent_dir); getwd()
# Logistic equation
# ! these files are heavy and not included in the Github repository ! #
# Please contact ong8181@gmail.com if necessary
# Or please reproduce them excuting the codes
esn_mackey = joblib.load("09_ESN_MackeyGlassOut/ESN_MackeyGlass.jb")
repl_python()
#::::::::::::::::::::::::::::::::::::::::::::::::::#
#::::::::::::::::::::::::::::::::::::::::::::::::::#
# Reset working directory
setwd(my_dir)
# <----------------------------------------------------> #
#     Visualize Forgotten curve and Memory Capacity
# <----------------------------------------------------> #
# Patterns in the predicted values
esn_df_train <- data.frame(time = 1:length(py$esn_mackey$train_predicted),
obs = py$esn_mackey$train_true[(py$esn_mackey$washout+2):(length(py$esn_mackey$train_true))],
pred = py$esn_mackey$train_predicted)
esn_df_test <- data.frame(time = 1:length(py$esn_mackey$test_true),
obs = py$esn_mackey$test_true,
pred = py$esn_mackey$test_predicted)
esn_df_test_lag <- data.frame(time = 1:length(py$esn_mackey$test_true),
obs = dplyr::lag(esn_df_test$obs, n = 17),
pred = dplyr::lag(esn_df_test$pred, n = 17))
esn_df_melt <- pivot_longer(esn_df_test, cols = -1, names_to = "variable", values_to = "value")
esn_df_melt_lag <- pivot_longer(esn_df_test_lag, cols = -1, names_to = "variable", values_to = "value")
esn_df_melt_lag$unlagged_value <- esn_df_melt$value
mackey_g1 <- ggplot(esn_df_test, aes(x = obs, y = pred)) +
geom_point() + geom_abline(intercept = 0, slope = 1, linetype = 2) +
xlab("Observed") + ylab("Predicted") + ggtitle("Macky-Glass equation")
mackey_g2 <- ggplot(esn_df_melt, aes(x = time, y = value, color = variable, linetype = variable, alpha = variable)) +
geom_line() + geom_point() + ggtitle("Macky-Glass equation") +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("Time") + ylab("Value")
mackey_g3 <- ggplot(esn_df_melt_lag, aes(x = unlagged_value, y = value,
color = variable, linetype = variable, alpha = variable)) + geom_point() +
scale_color_manual(values = c("black", "red3")) +
scale_alpha_manual(values = c(1, 0.8)) +
scale_linetype_manual(values = c(1, 1)) +
xlab("t") + ylab("t-17")
# <----------------------------------------------------> #
#                      Save figures
# <----------------------------------------------------> #
mackey_all <- plot_grid(mackey_g2,
plot_grid(mackey_g1, mackey_g3, rel_widths = c(1,1.2)),
ncol = 1)
pdf(sprintf("%s/Fig_MackeyGlass_ESN.pdf", fig_output_dir), width = 10, height = 8)
mackey_all; dev.off()
# Save listed objects
mackey_esn_glist <- list(mackey_g1, mackey_g2, mackey_g3)
saveRDS(mackey_esn_glist, sprintf("%s/Figs_ESN_MackeyGlass.obj", obj_output_dir))
rm(list=ls(9))
rm(list=ls())
# Load library
library(reticulate); packageVersion("reticulate") # 1.26, 2022.11.17
library(tidyverse); packageVersion("tidyverse") # 1.3.2, 2022.11.17
library(cowplot); packageVersion("cowplot") # 1.1.1
library(RColorBrewer); packageVersion("RColorBrewer") # 1.1.2, 2021.7.23
options('tibble.print_max' = 20)
theme_set(theme_cowplot())
get_palette <- colorRampPalette(brewer.pal(8, "Paired"))
palette_manual1 <- get_palette(47)
palette_manual2 <- get_palette(500)
# <----------------------------------------------------> #
#                       Load data
# <----------------------------------------------------> #
# Change workind directory and start python
fig_output_dir <- "0_RawFigs"
obj_output_dir <- "0_FigObj"
# Two specific species (100 random starting points)
# Load results
fish_esp = read_csv("../11_ESPindex_TSpredOut/ESPindex_Fish_PredLorenz.csv")
prok_esp = read_csv("../11_ESPindex_TSpredOut/ESPindex_Prok_PredLorenz.csv")
# Load original data base for species name
ecol_ts = read_csv('../data/edna_asv_table_prok_all.csv')
#fish_ts = read_csv('../data/BCreation_s0001_weekly_all.csv')
# All species (10 random starting points for each species)
n_rep <- 5
prok_names <- readRDS("../11_ESPindex_TSpredOut/prok_var_top500.obj")
fish_names <- readRDS("../11_ESPindex_TSpredOut/fish_var_top47.obj")
prok_names
fish_names
n_rep <- 5
prok_names <- readRDS("../11_ESPindex_TSpredOut/prok_var_top500.obj")
fish_names <- readRDS("../11_ESPindex_TSpredOut/fish_var_top47.obj")
fish_all = read_csv("../11_ESPindex_TSpredOut/ESPindex_Fish_RandomTS_top47_rep5.csv")
prok_all = read_csv("../11_ESPindex_TSpredOut/ESPindex_Prok_RandomTS_top500_rep5.csv")
dim(fish_all); dim(prok_all)
# Extract subset of the data to reduce data size
tail(rowSums(fish_all[,2:(ncol(fish_all)-1)]))
tail(rowSums(prok_all[,2:(ncol(prok_all)-1)]))
# Visualize ESP of a particular species
fish_long <- pivot_longer(fish_esp[,-1], cols = -state_id, names_to = "thread", values_to = "value")
prok_long <- pivot_longer(prok_esp[,-1], cols = -state_id, names_to = "thread", values_to = "value")
g1 <- ggplot(fish_long, aes(x = state_id, y = value, color = thread)) +
geom_line() + scale_color_viridis_d() + theme(legend.position = "none") +
xlim(0,30) + ggtitle("ESP of fish reservoir")
g2 <- ggplot(prok_long, aes(x = state_id, y = value, color = thread)) +
geom_line() + scale_color_viridis_d() + theme(legend.position = "none") +
xlim(0,30) + ggtitle("ESP of prokaryote reservoir")
g1
g2
# Visualize ESP of many species
fish_long2 <- pivot_longer(fish_all[,-1], cols = -state_id, names_to = "thread", values_to = "value")
prok_long2 <- pivot_longer(prok_all[,-1], cols = -state_id, names_to = "thread", values_to = "value")
# Add species name and thread
fish_nrow = dim(fish_all)[1]; prok_nrow = dim(prok_all)[1]
fish_long2$species <- rep(fish_names, times = fish_nrow, each = n_rep)
prok_long2$species <- rep(prok_names, times = prok_nrow, each = n_rep)
g3 <- ggplot(fish_long2, aes(x = state_id, y = value, color = species, group = thread)) +
geom_line(alpha = 0.5) +
scale_color_manual(values = palette_manual1) +
#scale_color_viridis_d() +
scale_x_log10() +
theme(legend.position = "none") +
#xlim(0,100) +
ggtitle("ESP of fish reservoir") +
xlab("Time step") + ylab("State difference") +
NULL
g4 <- ggplot(prok_long2, aes(x = state_id, y = value, color = species, group = thread)) +
geom_line(alpha = 0.5) +
scale_color_manual(values = palette_manual2) +
#scale_color_viridis_d() +
scale_x_log10() +
theme(legend.position = "none") +
#xlim(0,200) +
ggtitle("ESP of prokaryote reservoir") +
xlab("Time step") + ylab("State difference") +
NULL
g5 <- prok_long2 %>% filter(species %in% prok_names[1:30]) %>%
ggplot(aes(x = state_id, y = value, color = species, group = thread)) +
geom_line(alpha = 0.5) +
scale_color_manual(values =  get_palette(30)) +
#scale_color_viridis_d() +
scale_x_log10() +
theme(legend.position = "none") +
#xlim(0,200) +
ggtitle("ESP of prokaryote reservoir") +
xlab("Time step") + ylab("State difference") +
NULL
# <----------------------------------------------------> #
#                      Save figures
# <----------------------------------------------------> #
esp_all <- plot_grid(g1, g2, ncol = 2)
pdf(sprintf("%s/Fig_ESP_ERC1.pdf", fig_output_dir), width = 8, height = 4)
esp_all; dev.off()
esp_all2 <- plot_grid(g3, g4, ncol = 2)
pdf(sprintf("%s/Fig_ESP_ERC2_All.pdf", fig_output_dir), width = 8, height = 4)
esp_all2; dev.off()
ggsave(sprintf("%s/Figs_ESP2_all.jpg", obj_output_dir), plot = esp_all2, dpi = 300, width = 8, height = 4)
pdf(sprintf("%s/Fig_ESP_ERC2_sub.pdf", fig_output_dir), width = 4, height = 4)
g5; dev.off()
# Save listed objects
esp_glist1 <- list(g1, g2)
saveRDS(esp_glist1, sprintf("%s/Figs_ESP1.obj", obj_output_dir))
esp_glist2 <- list(g3, g4)
saveRDS(esp_glist2, sprintf("%s/Figs_ESP2_all.obj", obj_output_dir))
