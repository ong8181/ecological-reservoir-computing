reticulate::repl_python()
# Import essential modules
import numpy as np
reticulate::repl_python()
reticulate::repl_python()
py$ws
py$num_reservoir_nodes
library(reticulate)
reticulate::repl_python()
py$num_reservoir_nodes
rx = 3
ry = 2.6
bxy = 0.1
byx = 0.02
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
# Output time series
write.csv(d, "06_LogisticRC_TSpredOut/logistic_Xr3Yr2_6.csv", row.names = F)
rx = 2.91
ry = 2.92
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.91
ry = 2.91
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 3.01
ry = 2.91
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 3.02
ry = 2.91
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.90
ry = 2.91
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.91
ry = 2.91
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.91
ry = 2.92
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.92
ry = 2.9
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:1000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:1000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
plot(d$x, d$y)
plot(d$time, d$x, type = "l", xlim = c(1,350),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
plot(d$time, d$x, type = "l", xlim = c(1,550),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
d
d[900:1000,]
d0 <- as.data.frame(matrix(rep(NA,3*1000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
d0 <- as.data.frame(matrix(rep(NA,3*2000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
d
tail(d)
rx = 2.9
ry = 2.95
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*2000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
tail(d)
rx = 2.95
ry = 2.95
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*2000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
rx = 2.95
ry = 2.9
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*2000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
d
rx = 2.92
ry = 2.9
bxy = 0.1
byx = -0.2
d0 <- as.data.frame(matrix(rep(NA,3*2000),ncol=3))
colnames(d0) <- c("time","x","y")
d0[,1] <- 1:2000
d0[1,2:3] <- c(0.5, 0.5) # initial value
for(i in 1:1999){
d0[i+1,2] <- d0[i,2]*(rx - rx*d0[i,2] - byx*d0[i,3])
d0[i+1,3] <- d0[i,3]*(ry - bxy*d0[i,2] - ry*d0[i,3])
}
# Burn out
d <- d0[1:2000,]
# Visualize
plot(d$time, d$x, type = "l", xlim = c(1,250),
ylim = c(min(c(d$x, d$y)), max(c(d$x, d$y))),
las = 1, xlab = "Time", ylab = "Value", col = "royalblue")
lines(d$time, d$y, col = "red3")
# Output time series
#write.csv(d, "06_LogisticRC_TSpredOut/logistic_Xr3Yr2_6.csv", row.names = F)
write.csv(d, "logistic_Xr2_92Yr2_90.csv", row.names = F)
tail(d)
d[1000:1100,:
d[1000:1100,:
d[1000:1100,:]
d[1000:1100,]
# Load library
library("tidverse"); packageVersion("tidverse") # 1.25
# Load library
library("tidyverse"); packageVersion("tidyverse") # 1.25
library("tidyverse"); packageVersion("tidyverse") # 1.25
# Random uniform
# Random uniform
runif(10^5, min = -1, max = 1)
# Random uniform
set.seed(1234)
runif(10^5, min = -1, max = 1)
# Random uniform
set.seed(1234)
runif(10^5, min = -1, max = 1)
input0 <- runif(10^5, min = -1, max = 1)
df_input <- data.frame(time = 1:ts_length, input = input0)
# Random uniform
set.seed(1234)
ts_length = 10^5
input0 <- runif(ts_length, min = -1, max = 1)
df_input <- data.frame(time = 1:ts_length, input = input0)
# Save values
write.csv(df_input, "RandomUnif_IPC.csv", row.names = F)
df_input
# Random uniform
set.seed(1234)
ts_length = 10^5
input0 <- runif(ts_length, min = -1, max = 1)
df_input <- data.frame(time = 1:ts_length, input = input0)
df_input
# Save values
write.csv(df_input, "RandomUnif_IPC.csv", row.names = F)
# Load library
library("tidyverse"); packageVersion("tidyverse") # 1.25
